{"version":3,"sources":["components/SearchResult.js","components/SelectedArtist.js","components/Rec.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","props","artistName","item","name","length","substring","className","onClick","src","img_url","alt","SelectedArtist","Rec","artist_name","trackName","track_name","href","track_url","target","rel","artist_url","class","Main","useState","query","setQuery","results","setResults","selectedArtists","setSelectedArtists","recs","setRecs","mappedResults","setMappedResults","mappedSelects","setMappedSelects","mappedRecs","setMappedRecs","useEffect","timer","setTimeout","searchQuery","axios","post","then","res","data","catch","err","console","log","clearTimeout","map","key","id","oldArray","myArray","filter","items","document","getElementById","focus","artistIds","slicedTracks","track","includes","artist_id","slice","type","value","placeholder","onChange","e","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26193f85.chunk.js","sourcesContent":["import React from \"react\"\r\nimport './SearchResult.sass'\r\n\r\nfunction SearchResult(props) {\r\n  let artistName = props.item.name\r\n  if (artistName.length > 25){\r\n    artistName = artistName.substring(0, 25) + '...'\r\n  }\r\n  return (\r\n    <div className='search-result d-flex' onClick={props.onClick}>\r\n      <img src={props.item.img_url} alt='' className='artist-img'></img>\r\n      <p className='artist-name'>{artistName}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchResult","import React from \"react\"\r\nimport './SelectedArtist.sass'\r\n\r\nfunction SelectedArtist(props) {\r\n\r\n  return (\r\n    <div className='selected-artist d-flex text-nowrap' onClick={props.onClick}>\r\n      <img src={props.item.img_url} alt='' className='artist-img'></img>\r\n      <p>{props.item.name}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SelectedArtist","import React from \"react\"\r\nimport './SearchResult.sass'\r\n\r\nfunction Rec(props) {\r\n\tlet artistName = props.item.artist_name\r\n\tif (artistName.length > 25) {\r\n\t\tartistName = artistName.substring(0, 25) + '...'\r\n\t}\r\n\tlet trackName = props.item.track_name\r\n\tif (trackName.length > 25) {\r\n\t\ttrackName = trackName.substring(0, 25) + '...'\r\n\t}\r\n\treturn (\r\n\t\t<a href={props.item.track_url} target='_blank' rel=\"noopener noreferrer\">\r\n\t\t\t<div className='rec search-result d-flex'>\r\n\t\t\t\t<img src={props.item.img_url} alt='' className='track-img'></img>\r\n\t\t\t\t<div className='d-flex flex-column track-info'>\r\n\t\t\t\t\t<p className='rec-track-name'>{trackName}</p>\r\n\t\t\t\t\t<a href={props.item.artist_url} target='_blank' rel=\"noopener noreferrer\"><p className='rec-artist-name'>{artistName}</p></a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='rec-arrow'></div>\r\n\t\t\t</div>\r\n\t\t</a >\r\n\t)\r\n}\r\n\r\nexport default Rec","import React, { useState, useEffect } from \"react\"\r\nimport SearchResult from './SearchResult'\r\nimport SelectedArtist from './SelectedArtist'\r\nimport Rec from './Rec'\r\nimport axios from 'axios'\r\nimport './Main.sass'\r\n\r\nfunction Main() {\r\n\tconst [query, setQuery] = useState('')\r\n\tconst [results, setResults] = useState([])\r\n\tconst [selectedArtists, setSelectedArtists] = useState([])\r\n\tconst [recs, setRecs] = useState([])\r\n\t/* objects mapped */\r\n\tconst [mappedResults, setMappedResults] = useState('')\r\n\tconst [mappedSelects, setMappedSelects] = useState('')\r\n\tconst [mappedRecs, setMappedRecs] = useState('')\r\n\r\n\tuseEffect(() => {\r\n\t\t/* handle search */\r\n\t\tif (query === '') {\r\n\t\t\tsetResults([])\r\n\t\t} else {\r\n\t\t\tlet timer = setTimeout(() => { sendQuery(query) }, 500)\r\n\t\t\treturn () => clearTimeout(timer)\r\n\t\t}\r\n\t}, [query])\r\n\r\n\tuseEffect(() => {\r\n\t\t/* map results, onclick for adding a result to selections */\r\n\t\tif (!results.err) {\r\n\t\t\tsetMappedResults(\r\n\t\t\t\tresults.map(item => <SearchResult item={item} key={item.id}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetSelectedArtists(oldArray => {\r\n\t\t\t\t\t\t\tlet myArray = [...oldArray].filter(items => items.id !== item.id)\r\n\t\t\t\t\t\t\treturn [...myArray, item]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tsetResults([])\r\n\t\t\t\t\t\tsetQuery('')\r\n\t\t\t\t\t\tdocument.getElementById('search-bar').focus()\r\n\t\t\t\t\t}} />))\r\n\t\t}\r\n\t}, [results])\r\n\r\n\tuseEffect(() => {\r\n\t\t/* map selections, onclick for deleting */\r\n\t\tsetMappedSelects(selectedArtists.map(item => <SelectedArtist item={item} key={item.id}\r\n\t\t\tonClick={() => setSelectedArtists([...selectedArtists].filter(items => items.id !== item.id))} />))\r\n\t\tif (selectedArtists.length > 2) {\r\n\t\t\tlet artistIds = selectedArtists.map(item => item.id)\r\n\t\t\taxios.post('/artists/get-results'/* 'http://localhost:3001/artists/get-results' */, artistIds)\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\t/* filter out tracks by selected artists*/\r\n\t\t\t\t\tlet tracks = res.data.filter(track => {\r\n\t\t\t\t\t\treturn !artistIds.includes(track.artist_id)\r\n\t\t\t\t\t})\r\n\t\t\t\t\tlet slicedTracks = tracks.slice(0, 8)\r\n\t\t\t\t\tsetRecs(slicedTracks)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t})\r\n\t\t} else {\r\n\t\t\tsetRecs([])\r\n\t\t}\r\n\t}, [selectedArtists])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetResults([])\r\n\t\tsetMappedRecs(recs.map(item => <Rec item={item} key={item.id} />))\r\n\t}, [recs])\r\n\r\n\tfunction sendQuery(searchQuery) {\r\n\t\taxios.post('/artists/query'/* 'http://localhost:3001/artists/query' */, { searchQuery })\r\n\t\t\t.then(res => {\r\n\t\t\t\tsetResults(res.data)\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id='search-container' className='d-flex flex-column align-self-center'>\r\n\t\t\t<div className='d-flex flex-wrap' id='mapped-selects'>\r\n\t\t\t\t{mappedSelects}\r\n\t\t\t</div>\r\n\t\t\t<input\r\n\t\t\t\tid='search-bar'\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={query}\r\n\t\t\t\tplaceholder=\"Search artists\"\r\n\t\t\t\tonChange={e => { setQuery(e.target.value) }}\r\n\t\t\t/>\r\n\t\t\t{(() => {\r\n\t\t\t\tif (results.length !== 0) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{mappedResults}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t} else if (recs.length !== 0) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{mappedRecs}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<p className='text-center text-muted' id='placeholder-text'>To get recommendations, select at least 3 artists.</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t})()}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main","import React from \"react\"\nimport Main from './components/Main'\nimport './App.sass'\n\nfunction App() {\n\n  return (\n    <div className=\"d-flex flex-column\" id='main-container'>\n      < Main />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}