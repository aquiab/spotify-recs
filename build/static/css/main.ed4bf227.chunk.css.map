{"version":3,"sources":["index.css","SearchResult.sass","colors.sass","SelectedArtist.sass","Main.sass","App.sass","../node_modules/rfs/scss.scss"],"names":[],"mappings":"AAAA,KACE,QAAS,CACT,mJAEY,CACZ,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCVA,eACE,aAAc,CACd,iBAAkB,CAClB,kBAAmB,CACnB,wBAAiB,CAAjB,qBAAiB,CAAjB,oBAAiB,CAAjB,gBAAiB,CACjB,wBAAyB,CACzB,uDAAA,CAA6C,2BAC7C,CAA4B,4CAC5B,CAA6C,qBAR/C,wBAUI,CCXe,+BDYf,CAAyB,uBAAzB,CAAyB,cACzB,CAAe,yBAZnB,6BAcM,CAAsB,qBAAtB,CAAsB,sBACtB,CAAA,cAAA,CAAgB,iBAftB,6BAiBI,CAA+B,4BAjBnC,eAmBI,CAAgB,2BAnBpB,UAqBI,CAAW,WACX,CAAY,iBACZ,CAAkB,eAClB,CAAgB,qBAChB,CAAyB,0BAzB7B,YA2BI,CAAa,aACb,CAAc,eACd,CAAgB,qBAChB,CAAyB,+BA9B7B,eAgCI,CAAgB,2BAhCpB,aAkCI,CAAc,0BAlClB,UAoCI,CAAW,KAAG,+DAGhB,CACA,6CAA+C,CExCjD,sBFuCE,2BE5BA,CAXF,iBACE,cAAe,CACf,uDAAA,CAA6C,4CAC7C,CAC4B,wBAC5B,CDPgB,kBCQhB,CAAmB,aACnB,CAAc,kBACd,CAAmB,kBACnB,CAAmC,kBACnC,CAAmB,wBACnB,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBAAA,CAAiB,qBAXnB,WAaI,CAAY,UACZ,CAAW,iBACX,CAAkB,iBAClB,CAAmB,mBAhBvB,UAkBI,CAAY,gCACZ,CAAoC,eACpC,CAAgB,eAChB,CCrBJ,kBACE,SAAU,CAAG,gBAGb,gBAAkB,CAClB,iBAAkB,CAAG,kBAGrB,eAAgB,CAAG,YAGnB,uDAAA,CAA6C,4BAC7C,CAA6B,2BAC7B,CAA4B,iBAC5B,CAAkB,gBAClB,CAAiB,aACjB,CAAc,qBACd,CAAsB,wBACtB,CAAyB,iBACzB,CAAkB,YAClB,CAAa,kBAVf,wDAYI,CAA8C,wBAC9C,CFzBc,4BE0Bd,CF1Bc,+BE2Bd,CAAA,uBAAA,CAAyB,gDAAG,kBAG9B,UACE,CAAW,CC7Bf,ECkPM,mBAvE+B,CDzKnC,8CAAiD,CACjD,aAAc,CAAG,KAGjB,qBAAuB","file":"main.ed4bf227.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@import './colors.sass';\n\n.search-result {\n  height: 4.5rem;\n  border-radius: 2px;\n  align-items: center;\n  user-select: none;\n  background-color: #faf7fa;\n  background-image: url('../assets/anadir.svg');\n  background-repeat: no-repeat;\n  background-position: right 1rem bottom 1.8rem;\n  &:hover {\n    background-color: $hov-color;\n    transition: all 0.2s ease;\n    cursor: pointer;\n    img {\n      transform: scale(1.05);\n      transition: 0.2s; } }\n  p {\n    margin: 0 0 0 1.3rem !important; }\n  .artist-name {\n    font-weight: 600; }\n  .artist-img {\n    width: 4rem;\n    height: 4rem;\n    border-radius: 50%;\n    margin-left: 5px;\n    background-color: #333333; }\n  .track-img {\n    width: 3.7rem;\n    height: 3.7rem;\n    margin-left: 5px;\n    background-color: #333333; }\n  .rec-track-name {\n    font-weight: 700; }\n  .track-info {\n    max-width: 75%; }\n  .rec-arrow {\n    width: 1rem; } }\n.rec {\n  background-image: url('../assets/flecha-derecha.svg');\n  background-repeat: no-repeat;\n  background-position: right 0.5rem bottom 1.5rem; }\n","$pr-color: #700AD1;\n$hov-color: #f3e7fe;\n","@import './colors.sass';\n\n.selected-artist {\n  cursor: pointer;\n  background-image: url('../assets/cerrar.svg');\n  background-position: right 0.5rem bottom 0.4rem;\n  background-repeat: no-repeat;\n  background-color: $pr-color;\n  border-radius: 20px;\n  height: 1.4rem;\n  align-items: center;\n  margin: 0.5rem 0.1rem 0.5rem 0.1rem;\n  padding-right: 1rem;\n  user-select: none;\n  img {\n    height: 1rem;\n    width: 1rem;\n    border-radius: 50%;\n    margin-left: 0.3rem; }\n  p {\n    color: white;\n    margin: 0 0.6rem 0 0.2rem !important;\n    font-weight: 600;\n    font-size: 0.9rem; } }\n\n","@import './colors.sass';\n\n#search-container {\n  width: 55%; }\n\n#mapped-selects {\n  margin-top: 0.5rem;\n  min-height: 2.5rem; }\n\n#placeholder-text {\n  margin-top: 1rem; }\n\n#search-bar {\n  background-image: url('../assets/buscar.svg');\n  background-position: 12px 7px;\n  background-repeat: no-repeat;\n  padding-left: 45px;\n  font-size: 1.3rem;\n  height: 2.5rem;\n  box-sizing: border-box;\n  border: 2px solid #adadad;\n  border-radius: 4px;\n  outline: none;\n  &:focus {\n    background-image: url('../assets/buscar2.svg');\n    border: 2px solid $pr-color;\n    box-shadow: 0px 0px 2px 0px $pr-color;\n    transition: all 0.1s ease; } }\n\n@media only screen and (max-device-width: 750px) {\n  #search-container {\n    width: 85vw; } }\n","@import \"../node_modules/rfs/sass\";\n\n* {\n  @include font-size(17px);\n  font-family: 'Nunito Sans', sans-serif !important;\n  color: #212121; }\n\nbody {\n  background-color: white; }\n","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1 / $rfs-rem-value);\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + ' ' + if($rfs-unit == rem, #{$value / ($value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + ' ' + if($rfs-unit == px, #{$value / ($value * 0 + 1) * $rfs-rem-value}px, $value);\n      }\n      @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + ' ' + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + ' ' + $value;\n      }\n\n      @else {\n        // Remove unit from $value for calculations\n        $value: $value / ($value * 0 + if($unit == px, 1, 1 / $rfs-rem-value));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + ' ' +  if($rfs-unit == rem, #{$value / $rfs-rem-value}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + (abs($value) - $rfs-base-value) / $rfs-factor;\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{$value-min / $rfs-rem-value}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{$value-diff * 100 / $rfs-breakpoint}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + ' calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + ')';\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluidVal: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluidVal {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule {\n        #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n"]}